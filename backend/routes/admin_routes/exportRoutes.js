const express = require('express');
const { Parser } = require('json2csv');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const ReportAdmin = require('../../models/AdminModel/Movie'); // Replace with your actual path to the Report model
const router = express.Router();

// Route to export reports to CSV
router.get('/export/csv', async (req, res) => {
  try {
    const reports = await ReportAdmin.find({}); // Fetch all reports

    const fields = ['id', 'generatedBy', 'date', 'type', 'data'];
    const opts = { fields };
    const parser = new Parser(opts);

    const csv = parser.parse(reports);

    // Write CSV to file
    const filePath = './exports/reports.csv';
    fs.writeFileSync(filePath, csv);

    // Send file for download
    res.download(filePath, 'reports.csv', (err) => {
      if (err) console.error(err);
      fs.unlinkSync(filePath); // Clean up after sending
    });
  } catch (error) {
    res.status(500).json({ message: 'Error exporting reports to CSV', error });
  }
});

// Route to export reports to PDF
router.get('/export/pdf', async (req, res) => {
  try {
    const reports = await ReportAdmin.find({}); // Fetch all reports

    const doc = new PDFDocument();
    const filePath = './exports/reports.pdf';
    const writeStream = fs.createWriteStream(filePath);

    doc.pipe(writeStream);

    // Add PDF content
    doc.fontSize(20).text('Cinema Reports', { underline: true }).moveDown();

    reports.forEach((report) => {
      doc.fontSize(14).text(`ID: ${report.id}`);
      doc.text(`Generated By: ${report.generatedBy}`);
      doc.text(`Date: ${new Date(report.date).toDateString()}`);
      doc.text(`Type: ${report.type}`);
      doc.text(`Data: ${JSON.stringify(report.data)}`).moveDown();
    });

    doc.end();

    writeStream.on('finish', () => {
      // Send file for download
      res.download(filePath, 'reports.pdf', (err) => {
        if (err) console.error(err);
        fs.unlinkSync(filePath); // Clean up after sending
      });
    });
  } catch (error) {
    res.status(500).json({ message: 'Error exporting reports to PDF', error });
  }
});

module.exports = router;
