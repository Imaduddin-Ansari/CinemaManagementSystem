import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Navbar } from '../../components/NavbarEmployee';

export const ReportsPage = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedReport, setSelectedReport] = useState(null);
  const [reportType, setReportType] = useState('booking');

  useEffect(() => {
    const fetchReports = async () => {
      try {
        const response = await axios.get('http://localhost:3000/api/reports');
        setReports(response.data.reports);
      } catch (error) {
        console.error('Error fetching reports:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, []);

  const handleGenerateReport = async () => {
    try {
      const response = await axios.post('http://localhost:3000/api/reports/generate', { type: reportType });
      alert(response.data.message || 'Report generated successfully');
      setReports((prev) => [response.data.report, ...prev]); // Add the new report to the list
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Unable to generate report');
    }
  };

  const handleViewReport = async (reportId) => {
    try {
      const response = await axios.get(`http://localhost:3000/api/reports/${reportId}`);
      setSelectedReport(response.data.report);
    } catch (error) {
      console.error('Error fetching report by ID:', error);
      alert('Unable to fetch report details');
    }
  };

  const handleDeleteReport = async (reportId) => {
    try {
      const response = await axios.delete(`http://localhost:3000/api/reports/${reportId}`);
      alert(response.data.message || 'Report deleted successfully');
      setReports((prevReports) => prevReports.filter((report) => report._id !== reportId)); // Remove deleted report from the list
      setSelectedReport(null); // Close the modal
    } catch (error) {
      console.error('Error deleting report:', error);
      alert('Unable to delete report');
    }
  };

  const closeModal = () => {
    setSelectedReport(null);
  };

  if (loading) {
    return <div className="flex justify-center items-center h-screen text-white">Loading...</div>;
  }

  return (
    <div className="flex flex-col w-full min-h-screen bg-gradient-to-br from-black to-red-950 text-white">
      {/* Navbar */}
      <Navbar userName="Employee" />

      {/* Main Content */}
      <div className="p-8 flex-grow">
        <div className="container mx-auto outline outline-red-500 bg-black shadow-lg rounded-lg p-6">
          <h1 className="text-3xl font-bold mb-6 text-red-500 text-center">Reports</h1>

          {/* Generate Report Section */}
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-4">Generate Report</h2>
            <div className="flex items-center space-x-4 mb-4">
              <select
                value={reportType}
                onChange={(e) => setReportType(e.target.value)}
                className="p-2 rounded bg-black text-white border border-red-500"
              >
                <option value="booking">Booking Report</option>
                <option value="inquiry">Inquiry Report</option>
              </select>
              <button
                onClick={handleGenerateReport}
                className="px-4 py-2 bg-red-500 rounded hover:bg-red-600"
              >
                Generate Report
              </button>
            </div>
          </div>

          {/* All Reports Section */}
          <table className="w-full outline outline-white table-auto text-left bg-gradient-to-br from-black to-red-950 rounded-lg overflow-hidden shadow-lg">
            <thead className="bg-gradient-to-br from-black to-red-950 text-red-400">
              <tr>
                <th className="px-6 py-3">ID</th>
                <th className="px-6 py-3">Type</th>
                <th className="px-6 py-3">Generated By</th>
                <th className="px-6 py-3">Date</th>
                <th className="px-6 py-3">Actions</th>
              </tr>
            </thead>
            <tbody>
              {reports.map((report) => (
                <tr key={report._id} className="border-b border-white hover:bg-gray-800">
                  <td className="px-6 py-3">{report._id}</td>
                  <td className="px-6 py-3">{report.type}</td>
                  <td className="px-6 py-3">{report.generatedBy?.name || 'N/A'}</td>
                  <td className="px-6 py-3">{new Date(report.date).toLocaleString()}</td>
                  <td className="px-6 py-3">
                    <button
                      onClick={() => handleViewReport(report._id)}
                      className="text-blue-400 hover:underline"
                    >
                      View Details
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Report Details Modal */}
      {selectedReport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-black p-6 rounded-lg w-1/3">
          
            <h2 className="text-2xl font-bold mb-4">Report Details</h2>
            <div className="space-y-4">
              <p><strong>Type:</strong> {selectedReport.type}</p>
              <p><strong>Generated By:</strong> {selectedReport.generatedBy?.name || 'N/A'}</p>
              <p><strong>Date:</strong> {new Date(selectedReport.date).toLocaleString()}</p>
              
              {/* Displaying Report Data in a Friendly Way */}
              {selectedReport.type === 'booking' && (
                <div>
                  <h3 className="font-semibold text-lg">Booking Details</h3>
                  <ul>
                    {selectedReport.data.map((movieReport) => (
                      <li key={movieReport._id} className="space-y-2">
                        <p><strong>Movie:</strong> {movieReport.movieDetails.title}</p>
                        <p><strong>Total Bookings:</strong> {movieReport.totalBookings}</p>
                        <p><strong>Total Seats:</strong> {movieReport.totalSeats}</p>
                        <p><strong>Total Revenue:</strong> ${movieReport.totalRevenue}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              {selectedReport.type === 'inquiry' && (
                <div>
                  <h3 className="font-semibold text-lg">Inquiry Details</h3>
                  <ul>
                    {selectedReport.data.map((statusReport) => (
                      <li key={statusReport._id} className="space-y-2">
                        <p><strong>Status:</strong> {statusReport._id}</p>
                        <p><strong>Total Inquiries:</strong> {statusReport.total}</p>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              {selectedReport.type === 'other' && (
                <div>
                  <p>{selectedReport.data.message || 'Custom report type. Add your data manually.'}</p>
                </div>
              )}

              <div className="flex justify-between space-x-4">
                <button
                  onClick={closeModal}
                  className="bg-gray-600 hover:bg-gray-700 px-4 py-2 rounded-lg"
                >
                  Close
                </button>
                <button
                  onClick={() => handleDeleteReport(selectedReport._id)}
                  className="bg-red-500 hover:bg-red-600 px-4 py-2 rounded-lg"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
